{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","state","squares","Array","fill","xIsNext","i","this","slice","calculateWinner","setState","handleClick","status","winner","renderSquare","React","Component","Game","lines","length","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"2QAIA,SAASA,EAAOC,GACV,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,O,IAKXC,E,kDACN,WAAYJ,GAAO,IAAD,8BACd,cAAMA,IACDK,MAAQ,CACTC,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJC,E,wDAQNC,GACR,IAAMJ,EAAUK,KAAKN,MAAMC,QAAQM,QAC/BC,EAAgBP,IAAYA,EAAQI,KAGxCJ,EAAQI,GAAKC,KAAKN,MAAMI,QAAU,IAAM,IACxCE,KAAKG,SAAS,CACVR,QAASA,EACTG,SAAUE,KAAKN,MAAMI,a,mCAIhBC,GAAI,IAAD,OACZ,OACI,kBAACX,EAAD,CACAI,MAAOQ,KAAKN,MAAMC,QAAQI,GAC1BR,QAAS,kBAAM,EAAKa,YAAYL,Q,+BAOpC,IACIM,EADEC,EAASJ,EAAgBF,KAAKN,MAAMC,SAQ1C,OALIU,EADAC,EACS,WAAaA,EAEb,iBAAmBN,KAAKN,MAAMI,QAAU,IAAM,KAIvD,6BACI,yBAAKR,UAAU,UAAUe,GACzB,yBAAKf,UAAU,aACdU,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,IAEnB,yBAAKjB,UAAU,aACdU,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,IAEnB,yBAAKjB,UAAU,aACdU,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,S,GAxDXC,IAAMC,WA+DpBC,E,uKAEE,OACA,yBAAKpB,UAAU,QACX,yBAAKA,UAAU,cACf,kBAACG,EAAD,OAEA,yBAAKH,UAAU,aACf,8BACA,mC,GATOkB,IAAMC,WAuBzB,SAASP,EAAgBP,GAWrB,IAVA,IAAMgB,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFZ,EAAI,EAAGA,EAAIY,EAAMC,OAAQb,IAAI,CAAC,IAAD,cAChBY,EAAMZ,GADU,GAC3Bc,EAD2B,KACxBC,EADwB,KACrBC,EADqB,KAElC,GAAGpB,EAAQkB,IAAMlB,EAAQkB,KAAOlB,EAAQmB,IAAMnB,EAAQkB,KAAOlB,EAAQoB,GACjE,OAAOpB,EAAQkB,GAGvB,OAAO,KAtBXG,IAASC,OACT,kBAACP,EAAD,MACAQ,SAASC,eAAe,W","file":"static/js/main.2dea96f0.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n      return (\n        <button className=\"square\" onClick={props.onClick}>\n          {props.value}\n        </button>\n      );\n  }\n  \nclass Board extends React.Component {\nconstructor(props){\n    super(props);\n    this.state = {\n        squares: Array(9).fill(null),\n        xIsNext: true,\n    };\n}\n\nhandleClick(i){\n    const squares = this.state.squares.slice();\n    if (calculateWinner(squares) || squares[i]){\n        return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n        squares: squares,\n        xIsNext: !this.state.xIsNext,\n    });\n}\n\nrenderSquare(i) {\n    return (\n        <Square\n        value={this.state.squares[i]}\n        onClick={() => this.handleClick(i)}\n        \n        />\n    );\n}\n\nrender() {\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (winner){\n        status = 'Winner: ' + winner;\n    } else {\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O'); \n    }\n    \n    return (\n        <div>\n            <div className=\"status\">{status}</div>\n            <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n            </div>\n            <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n            </div>\n            <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n            </div>\n        </div>\n    );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n        <div className=\"game\">\n            <div className=\"game-board\">\n            <Board />\n            </div>\n            <div className=\"game-info\">\n            <div>{/* status */}</div>\n            <ol>{/* TODO */}</ol>\n            </div>\n        </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n<Game />,\ndocument.getElementById('root')\n);\n\nfunction calculateWinner(squares){\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++){\n        const [a, b, c] = lines[i];\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\n            return squares[a];\n        }\n    }\n    return null;\n}"],"sourceRoot":""}